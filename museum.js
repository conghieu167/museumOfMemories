document.addEventListener("DOMContentLoaded", function () {
  // 1. KI·ªÇM TRA "V√â TH√îNG H√ÄNH"
  if (sessionStorage.getItem("accessGranted") !== "true") {
    window.location.replace("opening.html");
    return;
  }

  // --- C√ÅC BI·∫æN GIAO DI·ªÜN ---
  const backgroundMusic = document.getElementById("background-music");
  const musicControls = document.getElementById("music-controls");
  const muteBtn = document.getElementById("mute-btn");
  const volumeSlider = document.getElementById("volume-slider");
  // ... c√°c bi·∫øn kh√°c gi·ªØ nguy√™n ...
  const leftCurtain = document.querySelector(".curtain.left");
  const rightCurtain = document.querySelector(".curtain.right");
  const mainTitle = document.getElementById("main-title");
  const subTitle = document.getElementById("sub-title");
  const guestNameTitle = document.getElementById("guest-name-title");
  let scrollIndicator = document.getElementById("scroll-indicator");

  // (M·ªöI) Bi·∫øn ƒë·ªÉ ki·ªÉm tra nh·∫°c ƒë√£ b·∫Øt ƒë·∫ßu hay ch∆∞a
  let isMusicStarted = false;

  // --- CHU·ªñI ANIMATION M·ªû M√ÄN ---
  setTimeout(() => {
    leftCurtain.classList.add("open");
    rightCurtain.classList.add("open");
    musicControls.classList.remove("hidden");

    // (C·∫¨P NH·∫¨T) C·ªë g·∫Øng b·∫≠t nh·∫°c v√† x·ª≠ l√Ω n·∫øu b·ªã l·ªói
    if (backgroundMusic) {
      backgroundMusic.volume = 0.5;
      setInitialVolumeSlider();

      // L·ªánh play() tr·∫£ v·ªÅ m·ªôt Promise
      const playPromise = backgroundMusic.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            // T·ª± ƒë·ªông ph√°t th√†nh c√¥ng!
            isMusicStarted = true;
          })
          .catch((error) => {
            // T·ª± ƒë·ªông ph√°t b·ªã ch·∫∑n.
            console.log(
              "Autoplay was prevented. Waiting for user interaction."
            );
            // Th√™m hi·ªáu ·ª©ng nh·∫•p nh√°y ƒë·ªÉ thu h√∫t ng∆∞·ªùi d√πng
            musicControls.classList.add("pulse");
          });
      }
    }
  }, 500);

  // ... C√°c setTimeout cho animation ti√™u ƒë·ªÅ gi·ªØ nguy√™n ...
  setTimeout(() => {
    mainTitle.classList.add("title-visible");
  }, 1500);
  setTimeout(() => {
    subTitle.classList.add("title-visible");
  }, 2000);
  setTimeout(() => {
    guestNameTitle.classList.add("title-visible");
  }, 2500);
  setTimeout(() => {
    scrollIndicator.classList.add("title-visible");
  }, 3500);
  setTimeout(() => {
    document.body.style.overflow = "visible";
  }, 3000);

  // --- LOGIC B·ªò ƒêI·ªÄU KHI·ªÇN NH·∫†C (C·∫¨P NH·∫¨T) ---
  function setInitialVolumeSlider() {
    /* ... code gi·ªØ nguy√™n ... */
  }

  muteBtn.addEventListener("click", function () {
    if (!backgroundMusic) return;

    // (M·ªöI) X·ª≠ l√Ω l·∫ßn click ƒë·∫ßu ti√™n n·∫øu nh·∫°c ch∆∞a ch·∫°y
    if (!isMusicStarted) {
      backgroundMusic.play();
      isMusicStarted = true;
      musicControls.classList.remove("pulse"); // T·∫Øt hi·ªáu ·ª©ng nh·∫•p nh√°y
      muteBtn.textContent = "üîä";
      return;
    }

    // Logic t·∫Øt/m·ªü ti·∫øng nh∆∞ c≈©
    backgroundMusic.muted = !backgroundMusic.muted;
    muteBtn.textContent = backgroundMusic.muted ? "üîá" : "üîä";
  });

  // ƒêo·∫°n m√£ m·ªõi, ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng
  volumeSlider.addEventListener("input", function () {
    if (!backgroundMusic) return; // Ki·ªÉm tra xem audio element c√≥ t·ªìn t·∫°i kh√¥ng

    const volumeValue = this.value; // L·∫•y gi√° tr·ªã t·ª´ thanh tr∆∞·ª£t (t·ª´ 0 ƒë·∫øn 1)
    backgroundMusic.volume = volumeValue; // C·∫¨P NH·∫¨T √ÇM L∆Ø·ª¢NG C·ª¶A NH·∫†C

    // C·∫≠p nh·∫≠t m√†u n·ªÅn cho thanh tr∆∞·ª£t
    const percentage = volumeValue * 100;
    const color = `linear-gradient(to right, #C0A062 ${percentage}%, #6D4C41 ${percentage}%)`;
    this.style.background = color;

    // T·ª± ƒë·ªông m·ªü ti·∫øng n·∫øu ng∆∞·ªùi d√πng k√©o thanh tr∆∞·ª£t khi ƒëang Mute
    if (backgroundMusic.muted && volumeValue > 0) {
      backgroundMusic.muted = false;
      muteBtn.textContent = "üîä";
    }

    // C·∫≠p nh·∫≠t icon n·∫øu k√©o v·ªÅ 0 ho·∫∑c k√©o l√™n l·∫°i
    if (volumeValue == 0) {
      muteBtn.textContent = "üîá";
    } else if (!backgroundMusic.muted) {
      muteBtn.textContent = "üîä";
    }
  });
  setInitialVolumeSlider();
  // --- LOGIC T∆Ø∆†NG T√ÅC CHO C√ÅC HI·ªÜN V·∫¨T (FOCUS MODE) ---
  const exhibitItems = document.querySelectorAll(".exhibit-item");
  const focusModal = document.getElementById("focus-modal");
  const closeModalBtn = document.getElementById("close-modal-btn");
  const focusTitle = document.getElementById("focus-title");
  const focusText = document.getElementById("focus-text");
  const focusImageContainer = document.getElementById("focus-image-container");

  if (exhibitItems.length > 0) {
    exhibitItems.forEach((item) => {
      item.addEventListener("click", function () {
        const title = this.dataset.title;
        const story = this.dataset.story;
        const artifactContent = this.querySelector(".artifact").cloneNode(true);

        focusTitle.textContent = title;
        focusText.textContent = story;
        focusImageContainer.innerHTML = "";
        focusImageContainer.appendChild(artifactContent);

        focusModal.classList.remove("hidden");
        document.body.classList.add("no-scroll");
      });
    });

    function closeModal() {
      focusModal.classList.add("hidden");
      document.body.classList.remove("no-scroll");
    }

    closeModalBtn.addEventListener("click", closeModal);
    focusModal.addEventListener("click", function (event) {
      if (event.target === focusModal) {
        closeModal();
      }
    });
  }

  // --- LOGIC N√öT QU√Ä T·∫∂NG CU·ªêI C√ôNG ---
  if (revealGiftButton) {
    revealGiftButton.addEventListener("click", function () {
      revealGiftButton.classList.add("hidden");
      finalGiftMessage.classList.remove("hidden");
      const duration = 3 * 1000;
      const animationEnd = Date.now() + duration;
      const defaults = {
        startVelocity: 30,
        spread: 360,
        ticks: 60,
        zIndex: 9999,
      };
      function randomInRange(min, max) {
        return Math.random() * (max - min) + min;
      }
      const interval = setInterval(function () {
        const timeLeft = animationEnd - Date.now();
        if (timeLeft <= 0) {
          return clearInterval(interval);
        }
        const particleCount = 50 * (timeLeft / duration);
        confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
          })
        );
        confetti(
          Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
          })
        );
      }, 250);
    });
  }
});
document.addEventListener("DOMContentLoaded", function () {
  // --- PH·∫¶N 1: ANIMATION CHO TI√äU ƒê·ªÄ & N√öT B·∫§M ---

  const sectionToObserve = document.getElementById("origin-exhibit-section");

  if (sectionToObserve) {
    const headerToAnimate = sectionToObserve.querySelector("header");
    // M·ªöI: Ch·ªçn khu v·ª±c ch·ª©a n√∫t b·∫•m ƒë·ªÉ animate
    const controlsToAnimate =
      sectionToObserve.querySelector("#exhibit-controls");

    const sectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Animate ti√™u ƒë·ªÅ
            if (headerToAnimate) {
              headerToAnimate.classList.add("is-visible");
            }
            // M·ªöI: Animate khu v·ª±c n√∫t b·∫•m
            if (controlsToAnimate) {
              controlsToAnimate.classList.add("is-visible");
            }
            sectionObserver.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.2,
      }
    );
    sectionObserver.observe(sectionToObserve);
  }

  // --- PH·∫¶N 2: HI·ªÜN KHUNG TRANH KHI B·∫§M N√öT (Gi·ªØ nguy√™n) ---
  const nextButton = document.getElementById("next-exhibit-btn");
  const endMessage = document.getElementById("exhibit-end-message");
  const exhibits = Array.from(document.querySelectorAll(".exhibit-item"));
  scrollIndicator = document.getElementById("si2");
  let currentExhibitIndex = 0;

  if (nextButton && exhibits.length > 0) {
    exhibits.forEach((item) => {
      item.style.opacity = "0";
      item.style.visibility = "hidden";
      item.style.transform = "translateY(30px)";
    });

    nextButton.addEventListener("click", function () {
      if (currentExhibitIndex < exhibits.length) {
        const currentExhibit = exhibits[currentExhibitIndex];
        currentExhibit.style.visibility = "visible";
        currentExhibit.style.opacity = "1";
        currentExhibit.style.transform = "translateY(0)";
        currentExhibitIndex++;
      }

      if (currentExhibitIndex === exhibits.length) {
        nextButton.disabled = true;
        nextButton.style.display = "none";
        endMessage.style.display = "block";
        setTimeout(() => {
          scrollIndicator.classList.add("title-visible");
        }, 1000);
      }
    });
  }
});

// D√°n ƒëo·∫°n m√£ n√†y v√†o cu·ªëi file museum.js, tr∆∞·ªõc d·∫•u } ƒë√≥ng c·ªßa s·ª± ki·ªán DOMContentLoaded

// --- (M·ªöI) LOGIC T∆Ø∆†NG T√ÅC CHO ƒê·∫†I L·ªò TH·ªúI GIAN ---
const timelineItems = document.querySelectorAll(".timeline-container li");
const timelineTriggers = document.querySelectorAll(".timeline-container .date");

timelineTriggers.forEach((trigger) => {
  trigger.addEventListener("click", () => {
    // L·∫•y th·∫ª <li> cha c·ªßa n√∫t v·ª´a click
    const parentLi = trigger.parentElement;

    // Ki·ªÉm tra xem th·∫ª n√†y c√≥ ƒëang ƒë∆∞·ª£c ch·ªçn hay kh√¥ng
    const isActive = parentLi.classList.contains("is-active");

    // Tr∆∞·ªõc ti√™n, x√≥a l·ªõp 'is-active' kh·ªèi t·∫•t c·∫£ c√°c m·ª•c
    // timelineItems.forEach((item) => {
    //   item.classList.remove("is-active");
    // });

    // N·∫øu th·∫ª v·ª´a click ch∆∞a ƒë∆∞·ª£c ch·ªçn, th√¨ th√™m l·ªõp 'is-active' v√†o n√≥
    // (T·∫°o hi·ªáu ·ª©ng toggle: click l·∫ßn n·ªØa ƒë·ªÉ ƒë√≥ng l·∫°i)
    if (!isActive) {
      parentLi.classList.add("is-active");
    }
  });
});

// D√°n ƒëo·∫°n m√£ n√†y v√†o cu·ªëi file museum.js, b√™n trong s·ª± ki·ªán DOMContentLoaded

// --- (M·ªöI) LOGIC T∆Ø∆†NG T√ÅC CHO H·ªòP TH∆Ø K·ª∂ NI·ªÜM ---
const mailboxSection = document.getElementById("mailbox-section");
const mainLetter = document.querySelector(".main-letter");
const postcards = document.querySelectorAll(".postcard");
const rainSound = document.getElementById("rain-sound");

if (mainLetter) {
  mainLetter.addEventListener("click", (e) => {
    e.stopPropagation(); // NgƒÉn s·ª± ki·ªán click lan ra ngo√†i
    mainLetter.classList.toggle("is-open");
  });
}

if (postcards.length > 0) {
  postcards.forEach((card) => {
    card.addEventListener("click", (e) => {
      e.stopPropagation();
      // ƒê√≥ng c√°c b∆∞u thi·∫øp kh√°c tr∆∞·ªõc khi m·ªü b∆∞u thi·∫øp n√†y
      postcards.forEach((otherCard) => {
        if (otherCard !== card) otherCard.classList.remove("is-flipped");
      });
      card.classList.toggle("is-flipped");
    });
  });
}
